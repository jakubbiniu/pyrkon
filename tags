!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	Development	//
ACK	util.h	18;"	d
APP_PKT	util.h	21;"	d
BeginPyrkon	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish, BeginPyrkon, InWantPyrkon, InSectionPyrkon, FinishedWorkshops} state_t;$/;"	e	enum:__anon2
FINISH	util.h	22;"	d
FLAGS	Makefile	/^FLAGS=-g$/;"	m
FinishedWorkshops	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish, BeginPyrkon, InWantPyrkon, InSectionPyrkon, FinishedWorkshops} state_t;$/;"	e	enum:__anon2
HEADERS	Makefile	/^HEADERS=$(SOURCES:.c=.h)$/;"	m
InFinish	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish, BeginPyrkon, InWantPyrkon, InSectionPyrkon, FinishedWorkshops} state_t;$/;"	e	enum:__anon2
InMonitor	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish, BeginPyrkon, InWantPyrkon, InSectionPyrkon, FinishedWorkshops} state_t;$/;"	e	enum:__anon2
InRun	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish, BeginPyrkon, InWantPyrkon, InSectionPyrkon, FinishedWorkshops} state_t;$/;"	e	enum:__anon2
InSection	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish, BeginPyrkon, InWantPyrkon, InSectionPyrkon, FinishedWorkshops} state_t;$/;"	e	enum:__anon2
InSectionPyrkon	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish, BeginPyrkon, InWantPyrkon, InSectionPyrkon, FinishedWorkshops} state_t;$/;"	e	enum:__anon2
InWant	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish, BeginPyrkon, InWantPyrkon, InSectionPyrkon, FinishedWorkshops} state_t;$/;"	e	enum:__anon2
InWantPyrkon	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish, BeginPyrkon, InWantPyrkon, InSectionPyrkon, FinishedWorkshops} state_t;$/;"	e	enum:__anon2
MAINH	main.h	2;"	d
MPI_PAKIET_T	util.c	/^MPI_Datatype MPI_PAKIET_T;$/;"	v
NITEMS	util.h	14;"	d
RELEASE	util.h	20;"	d
REQUEST	util.h	19;"	d
SEC_IN_STATE	main.h	13;"	d
SOURCES	Makefile	/^SOURCES=$(wildcard *.c)$/;"	m
STATE_CHANGE_PROB	main.h	14;"	d
UTILH	util.h	2;"	d
WATEK_GLOWNY_H	watek_glowny.h	2;"	d
WATEK_KOMUNIKACYJNY_H	watek_komunikacyjny.h	2;"	d
changeState	util.c	/^void changeState( state_t newState )$/;"	f
check_thread_support	main.c	/^void check_thread_support(int provided)$/;"	f
data	util.h	/^    int data;     \/* przykładowe pole z danymi; można zmienić nazwę na bardziej pasującą *\/$/;"	m	struct:__anon1
debug	main.h	62;"	d
debug	main.h	64;"	d
finalizuj	main.c	/^void finalizuj()$/;"	f
finished	main.c	/^int *finished;$/;"	v
finishedMut	util.c	/^pthread_mutex_t finishedMut = PTHREAD_MUTEX_INITIALIZER;$/;"	v
free_arrays	main.c	/^void free_arrays(){$/;"	f
indexes_for_waiting_queue	main.c	/^int *indexes_for_waiting_queue; \/\/ indeksy dla kolejki oczekujących na bilet dla każdego warsztatu + dla pyrkonu$/;"	v
inicjuj_typ_pakietu	util.c	/^void inicjuj_typ_pakietu()$/;"	f
initialize_arrays	main.c	/^void initialize_arrays() {$/;"	f
local_request_ts	main.c	/^int ***local_request_ts;$/;"	v
main	main.c	/^int main(int argc, char **argv)$/;"	f
mainLoop	watek_glowny.c	/^void mainLoop()$/;"	f
my_workshops	main.c	/^int **my_workshops; \/\/ dla każdego uczestnika zapisujemy listę warsztatów, na które się zapisał (zacyznamy od 0 - pyrkonu) $/;"	v
name	util.c	/^    const char *name;$/;"	m	struct:tagNames_t	file:
number_of_acks	main.c	/^int *number_of_acks; \/\/ dla kazdego uczestnika liczymy liczbe acks$/;"	v
number_of_participants	main.c	/^int number_of_participants = 0; \/\/ liczba uczestników$/;"	v
number_of_people_per_workshop	main.c	/^int number_of_people_per_workshop = 0; \/\/ liczba uczestników na warsztat$/;"	v
number_of_tickets	main.c	/^int number_of_tickets=0; \/\/ liczba biletów na pyrkon$/;"	v
number_of_workshops	main.c	/^int number_of_workshops=0;  \/\/ liczba warsztatów$/;"	v
number_of_workshops_per_participant	main.c	/^int number_of_workshops_per_participant=0; \/\/ liczba warsztatów na uczestnika$/;"	v
on_pyrkon	main.c	/^int *on_pyrkon; \/\/ dla każdego uczestnika zapisujemy czy jest na pyrkonie$/;"	v
packet_t	util.h	/^} packet_t;$/;"	t	typeref:struct:__anon1
print_usage	main.c	/^void print_usage(const char *program_name) {$/;"	f
println	main.h	68;"	d
rank	main.c	/^int rank, size;$/;"	v
reset_variables	watek_glowny.c	/^void reset_variables() {$/;"	f
sendPacket	util.c	/^void sendPacket(packet_t *pkt, int destination, int tag, int workshop_id_request) {$/;"	f
size	main.c	/^int rank, size;$/;"	v
src	util.h	/^    int src;  $/;"	m	struct:__anon1
stan	util.c	/^state_t stan=BeginPyrkon;$/;"	v
startKomWatek	watek_komunikacyjny.c	/^void *startKomWatek(void *ptr)$/;"	f
stateMut	util.c	/^pthread_mutex_t stateMut = PTHREAD_MUTEX_INITIALIZER;$/;"	v
state_t	util.h	/^typedef enum {InRun, InMonitor, InWant, InSection, InFinish, BeginPyrkon, InWantPyrkon, InSectionPyrkon, FinishedWorkshops} state_t;$/;"	t	typeref:enum:__anon2
tag	util.c	/^    int tag;$/;"	m	struct:tagNames_t	file:
tag2string	util.c	/^const char *const tag2string( int tag )$/;"	f
tagNames	util.c	/^} tagNames[] = { { "pakiet aplikacyjny", APP_PKT }, { "finish", FINISH}, $/;"	v	typeref:struct:tagNames_t
tagNames_t	util.c	/^struct tagNames_t{$/;"	s	file:
threadKom	main.c	/^pthread_t threadKom;$/;"	v
ts	util.h	/^    int ts;       \/* timestamp (zegar lamporta *\/$/;"	m	struct:__anon1
waiting_queue	main.c	/^int **waiting_queue; \/\/ kolejka oczekujących na bilet uczestników dla kazdego warsztatu + dla pyrkonu$/;"	v
workshop_count	main.c	/^int *workshop_count; \/\/ dla każdego uczestnika liczymy liczbę warsztatów, na których był licząc też pyrkon jako jeden warsztat$/;"	v
workshop_id	main.c	/^int workshop_id;$/;"	v
workshop_id	util.h	/^    int workshop_id;$/;"	m	struct:__anon1
zegar	main.c	/^int zegar=0; \/\/ zegar lamporta$/;"	v
zegarMut	util.c	/^pthread_mutex_t zegarMut = PTHREAD_MUTEX_INITIALIZER;$/;"	v
